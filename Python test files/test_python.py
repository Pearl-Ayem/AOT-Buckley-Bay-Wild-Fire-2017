#!/usr/bin/python'''Module: read_and_map_mod_aerosol.py==========================================================================================Disclaimer: The code is for demonstration purposes only. Users are responsible to check for accuracy and revise to fit their objective.Author: Justin Roberts-Pierel, 2015Organization: NASA ARSETPurpose: To extract AOD data from a MODIS HDF4 file (or series of files) and create a map of the resulting dataSee the README associated with this module for more information.=========================================================================================='''#import necessary modulesfrom pyhdf import SDimport numpy as npfrom mpl_toolkits.basemap import Basemap, cmimport matplotlib.pyplot as pltimport sysimport h5pyimport timeimport calendarFILE_NAME='MYD04_L2.A2017249.2105.006.2017250160535.hdf'hdf=SD.SD(FILE_NAME)# Get lat and lon infolat = hdf.select('Latitude')latitude = lat[:]min_lat=latitude.min()max_lat=latitude.max()lon = hdf.select('Longitude')longitude = lon[:]min_lon=longitude.min()max_lon=longitude.max()SDS_NAME='Image_Optical_Depth_Land_And_Ocean'sds=hdf.select(SDS_NAME)#get scale factor for AOD SDSattributes=sds.attributes()scale_factor=attributes['scale_factor']#get valid range for AOD SDSrange=sds.getrange()min_range=min(range)max_range=max(range)#get SDS datadata=sds.get()#get data within valid rangevalid_data=data.ravel()valid_data=[x for x in valid_data if x>=min_range]valid_data=[x for x in valid_data if x<=max_range]valid_data=np.asarray(valid_data)#scale the valid datavalid_data=valid_data*scale_factor#find the averageaverage=sum(valid_data)/len(valid_data)#find the standard deviationstdev=np.std(valid_data)       attrs = sds.attributes(full=1)fillvalue=attrs['_FillValue']# fillvalue[0] is the attribute value (-9999)fv = fillvalue[0]#turn fillvalues to NaNdata=data.astype(float)data[data == fv] = np.nan#create the mapdata = np.ma.masked_array(data, np.isnan(data))m = Basemap(projection='cyl', resolution='l', llcrnrlat=min_lat, urcrnrlat = max_lat, llcrnrlon=min_lon, urcrnrlon = max_lon)m.drawcoastlines(linewidth=0.5)m.drawparallels(np.arange(-90., 120., 5.), labels=[1, 0, 0, 0])m.drawmeridians(np.arange(-180., 181., 5.), labels=[0, 0, 0, 1])x, y = m(longitude, latitude)m.pcolormesh(x, y, data*scale_factor, cmap=plt.cm.jet)plt.autoscale()#create colorbarcb = m.colorbar()#label colorboarcb.set_label('AOD')#title the plotplotTitle=FILE_NAME[:-4]plt.title('{0}\n {1}'.format(plotTitle, SDS_NAME))fig = plt.gcf()# Show the plot window.plt.show()#saves as a png if the user would likepngfile = '{0}.png'.format(plotTitle)fig.savefig(pngfile)